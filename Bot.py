import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = 6540509823  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    keyboard = [
        [InlineKeyboardButton("üéÅ –ú–∞–≥–∞–∑–∏–Ω NFT", callback_data="shop")],
        [InlineKeyboardButton("üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏", callback_data="trades")],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")])
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Å–¥–µ–ª–æ–∫ —Å NFT!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ NFT", callback_data="manage_nft")],
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        "üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "‚Ä¢ –°–¥–µ–ª–æ–∫: 1423\n"
        "‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: 5.0/5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n"
        "üíé –ë–∞–ª–∞–Ω—Å: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 15\n"
        "üéÅ NFT —Ç–æ–≤–∞—Ä–æ–≤: 7\n"
        "üíº –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: 3\n"
        "üíé –í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†\n\n"
        "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    await query.edit_message_text(stats_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "admin":
        await admin_panel(update, context)
    elif query.data == "admin_panel":
        await admin_panel(update, context)
    elif query.data == "stats":
        await admin_stats(update, context)
    elif query.data == "main_menu":
        await start(update, context)
    else:
        await query.edit_message_text("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/test - –¢–µ—Å—Ç –±–æ—Ç–∞\n"
        "/help - –ü–æ–º–æ—â—å"
    )

def main():
    if not BOT_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ Render")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º Application
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("test", test_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {BOT_TOKEN[:10]}...")
        
        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å...")
      application.run_polling()
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
